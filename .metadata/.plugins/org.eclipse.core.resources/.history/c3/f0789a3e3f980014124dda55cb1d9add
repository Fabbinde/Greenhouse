package de.htwg.greenhouseApp;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;
import de.htwg.greenhouseappnew2015.GreenHouseArduinoService;
import de.htwg.greenhouseappnew2015.LocalService;
import de.htwg.greenhouseappnew2015.R;


public class MainActivity extends Activity {

	Intent intentService;
	
	Button startServiceButton;
	Button stopServiceHandlerButton;
	
	
	
	
	
	
	private LocalService mBoundService;

	private ServiceConnection mConnection = new ServiceConnection() {
	    public void onServiceConnected(ComponentName className, IBinder service) {
	        // This is called when the connection with the service has been
	        // established, giving us the service object we can use to
	        // interact with the service.  Because we have bound to a explicit
	        // service that we know is running in our own process, we can
	        // cast its IBinder to a concrete class and directly access it.
	        mBoundService = ((LocalService.LocalBinder)service).getService();

	        // Tell the user about this for our demo.
	        makeToast("Service gestartet");
	    }

	    public void onServiceDisconnected(ComponentName className) {
	        // This is called when the connection with the service has been
	        // unexpectedly disconnected -- that is, its process crashed.
	        // Because it is running in our same process, we should never
	        // see this happen.
	        mBoundService = null;
	        makeToast("Service gestartet!");
	    }
	};

	private boolean mIsBound;

	void doBindService() {
	    // Establish a connection with the service.  We use an explicit
	    // class name because we want a specific service implementation that
	    // we know will be running in our own process (and thus won't be
	    // supporting component replacement by other applications).
		makeToast("START");
		Log.i("HA","JHA");
	    bindService(new Intent(this.getApplicationContext(), 
	            LocalService.class), mConnection, Context.BIND_AUTO_CREATE);
	    mIsBound = true;
	}

	void doUnbindService() {
	    if (mIsBound) {
	        // Detach our existing connection.
	        unbindService(mConnection);
	        mIsBound = false;
	    }
	}

	@Override
	protected void onDestroy() {
	    super.onDestroy();
	    doUnbindService();
	}
	
	
	
	public void makeToast(String text) {
		Toast.makeText(this, text,
                Toast.LENGTH_SHORT).show();
	}
	
	
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        startServiceButton = (Button) findViewById(R.id.buttonLoadData);
        stopServiceHandlerButton = (Button) findViewById(R.id.buttonStopHandler);
        
        startServiceButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				//intentService = new Intent(v.getContext(), GreenHouseArduinoService.class);
		        //startService(intentService);
				doBindService();
			}
		});
        
        stopServiceHandlerButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				doUnbindService();
			}
		});
        
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
