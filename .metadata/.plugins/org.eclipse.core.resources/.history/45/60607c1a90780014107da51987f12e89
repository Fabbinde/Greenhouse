package com.example.testappjersey;

import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.json.JSONConfiguration;

public class MainActivity extends Activity {

	Button sendFeedbackButton;
	int patient_1 = 1;
	int exercise_1 = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		sendFeedbackButton = (Button) findViewById(R.id.button_sendFeedback);
		sendFeedbackButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				// temporär: User ID, von GUI dann holen

				UserFeedback userFeedback = new UserFeedback(patient_1,
						exercise_1, RatingEnum.RATE_POSITIV,
						"Ohne Komplikationen");
				sendFeedback(userFeedback);
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();

		// noinspection SimplifiableIfStatement
		if (id == R.id.action_settings) {
			return true;
		}

		return super.onOptionsItemSelected(item);
	}

    private boolean sendFeedback(UserFeedback userFeedback) {

        Toast.makeText(this.getApplicationContext(), "senden..", Toast.LENGTH_SHORT).show();
        //ClientConfig clientConfig = new ClientConfig(UserFeedback.class);
         //       Boolean.TRUE);
        //JsonMapper jm = new JsonMapper();
       // Log.i("JSON: ", jm.getUserFeedback());

        String json = "";
        ObjectMapper mapper = new ObjectMapper();
        try {
            json = mapper.writeValueAsString(userFeedback);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.i("MappeR: ", json);
        SendReceiveJsonTask task = new SendReceiveJsonTask("http://localhost:8080/de.htwg.aume.restserver/", json);
        task.execute();

        /* FÜR SONNTAG: EINFACH MAL TESTEN !!*/


        /*JAXS Jersey*/
        /*final Client client;
        client = ClientBuilder.newBuilder()
                .register(JacksonFeature.class)
                .build();
        WebTarget webTarget = client.target("http://localhost:8080/de.htwg.aume.restserver/");
        //webTarget.path("resource");

        Invocation.Builder invocationBuilder =
                webTarget.request(MediaType.APPLICATION_JSON_TYPE);
        //invocationBuilder.header("some-header", "true");

        Response response = invocationBuilder.pos;


        //System.out.println(response.getStatus());
        //System.out.println(response.readEntity(String.class));
        Log.i("response.getStatus()", String.valueOf(response.getStatus()));
        Log.i(("response.readEntity(String.class)"), response.readEntity(String.class));
        /*
        *
        *
        *
        *
        * */
        return true;
    }

    private class SendReceiveJsonTask extends AsyncTask<String, Void, String> {

        String json = "";
        String url = "";

        public SendReceiveJsonTask(String urlString, String jsonString) {
            this.url = urlString;
            this.json = jsonString;
        }
        @Override
        protected String doInBackground(String... urls) {
            DefaultHttpClient httpclient = new DefaultHttpClient();
            HttpPost httpPostRequest = new HttpPost(this.url);


            try {
                StringEntity se = new StringEntity(this.json);
                httpPostRequest.setEntity(se);
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }

            // Set HTTP parameters

            httpPostRequest.setHeader("Accept", "application/json");
            httpPostRequest.setHeader("Content-type", "application/json");

            long t = System.currentTimeMillis();
            HttpResponse response = null;
            try {
                response = (HttpResponse) httpclient.execute(httpPostRequest);
            } catch (IOException e) {
                e.printStackTrace();
            }
            Log.i("response", "HTTPResponse received in [" + (System.currentTimeMillis()-t) + "ms]");

            try {
                InputStream content = response.getEntity().getContent();
                String resultString= convertStreamToString(content);
                content.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            return response.getEntity().toString();
        }

        @Override
        protected void onPostExecute(String result) {
            //textView.setText(result);
            Log.i("HTTP ANTWORT AUF REQUEST", "ANTWORT: " + result);
        }

        private String convertStreamToString(InputStream is) {

            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            StringBuilder sb = new StringBuilder();

            String line = null;
            try {
                while ((line = reader.readLine()) != null) {
                    sb.append(line + "\n");
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return sb.toString();
        }
    }

	/*
	 * 
	 * @GET
	 * 
	 * @Produces(MediaType.APPLICATION_JSON) public String
	 * receiveFeedbacks(String json) { boolean saved = true; // save = TODO ->
	 * prüfen ob erfolgreich in Datenbank gespeichert if(saved) { return
	 * "Erfolgreich gespeichert"; } else { return
	 * "Fehler beim speichern in der datenbank"; }
	 * 
	 * }
	 */

}
