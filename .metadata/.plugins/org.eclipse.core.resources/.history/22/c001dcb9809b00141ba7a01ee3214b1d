package de.htwg.greenhouseService;

/*
 * http://developer.android.com/guide/components/bound-services.html
 * 
 * Binding to a Started Service

 As discussed in the Services document, you can create a service that is both started and bound.
 That is, the service can be started by calling startService(), which allows the service to run 
 indefinitely, and also allow a client to bind to the service by calling bindService().

 If you do allow your service to be started and bound, then when the service has been started,
 the system does not destroy the service when all clients unbind. Instead, you must explicitly
 stop the service, by calling stopSelf() or stopService().
 * 
 * */

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Timestamp;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.Toast;
import de.htwg.greenhouseApp.MainActivity;
import de.htwg.greenhouseUtil.GreenhouseContentProvider;
import de.htwg.greenhouseUtil.GreenhouseUtils;
import de.htwg.greenhouseappnew2015.R;

public class GreenhouseArduinoService extends Service {

	public final static int MESSAGE_CANCEL_HANDLER = 1;
	public final static int MESSAGE_CLEAR_DATABASE = 2;

	private boolean notificationTemperatureIsShowing = false;
	private boolean notificationHumiAirIsShowing = false;
	// TODO Restliche noch hier hinzufügen und unten immer abfragen, bevor eine
	// neue gesendet wird

	GreenhouseUtils greenhouseUtils = new GreenhouseUtils();

	String ip = "141.37.192.14";
	int port = 80;

	private int serviceCheckIntervall = 5000;

	int mStartMode; // indicates how to behave if the service is killed
	IBinder mBinder; // interface for clients that bind
	boolean mAllowRebind; // indicates whether onRebind should be used

	int notificationCounter = 0;
	int timeToWaitForNextNotification;
	boolean allowedNextNotificationFromUser;

	private boolean serviceIsBoundedToActivity = false;

	private ArduinoDataBean aBean;

	private Array beans;
	
	NotificationManager mNM;

	private Looper mServiceLooper;
	private ServiceHandler mServiceHandler;

	Intent activityIntent;

	GreenhouseContentProvider contentProvider;

	private String LOG_TAG = this.getClass().getSimpleName();

	public int getServiceCheckIntervall() {
		return serviceCheckIntervall;
	}

	public void setServiceCheckIntervall(int serviceCheckIntervall) {
		this.serviceCheckIntervall = serviceCheckIntervall;
	}

	public GreenhouseArduinoService() {
		prepareDummyBean();
		contentProvider = new GreenhouseContentProvider();

	}

	private void prepareDummyBean() {
		aBean = new ArduinoDataBean();
		aBean.setAirOn(false);
		aBean.setAirPercent(20.22);
		aBean.setCurrentHumiAir(88.88);
		aBean.setCurrentHumiGround(50.00);
		aBean.setCurrentTemp_1(20.00);
		aBean.setCurrentTemp_2(22.00);
		/* TODO id automatisch vergeben */
		aBean.setId(8);
		aBean.setLightOn(true);
		aBean.setLightPercent(100.00);
		aBean.setMaxHumiAir(95.00);
		aBean.setMaxHumiGround(98);
		aBean.setMaxTemp(30.00);
		aBean.setMinHumiAir(20.50);
		aBean.setMinHumiGround(25.00);
		aBean.setMinTemp(10.00);
		aBean.setPlantName("Petersilie");
		aBean.setTimeStamp(new java.sql.Timestamp(System.currentTimeMillis()));
		aBean.setWaterOn(true);
		aBean.setWaterTimeSeconds(10);

	}

	// Handler that receives messages from the thread
	private final class ServiceHandler extends Handler {

		private String LOG_TAG = this.getClass().getSimpleName();

		public ServiceHandler(Looper looper) {
			super(looper);
		}

		@Override
		public void handleMessage(Message msg) {
			// Normally we would do some work here, like download a file.
			// For our sample, we just sleep for 5 seconds.
			Log.d(LOG_TAG + " handleMessage", "start Handler Thread loop");

			int testCountLoop = 0;

			while (true) {

				// TODO
				// FIXME
				// Hier Daten von Arduino laden!
				// getDataFromArduinoByTcp();
				// ODER?
				// getDataFromArduinoByAsyncTcp();
				synchronized (this) {
					try {
						if (testCountLoop == 3) {
							aBean.setCurrentTemp_1(32.00);
						}
						if (testCountLoop == 6) {
							aBean.setCurrentHumiAir(99.00);
						}
						if (testCountLoop == 12) {
							testCountLoop = 0;
						}
						testCountLoop++;
						if (this.hasMessages(MESSAGE_CANCEL_HANDLER)) {
							this.removeMessages(MESSAGE_CANCEL_HANDLER);
							// Stop the service using the startId, so that we
							// don't stop
							// the service in the middle of handling another job
							Log.d(LOG_TAG + " handleMessage - while(true)",
									"STOP");
							stopSelf(msg.arg1);
							break;
						} else if (this.hasMessages(MESSAGE_CLEAR_DATABASE)) {
							this.removeMessages(MESSAGE_CLEAR_DATABASE);
							// Clear database
							Log.d(LOG_TAG + "handleMessage - while(true)",
									"CLEAR DATABASE");
							clearProviderData();
						}
						Log.d(LOG_TAG + " handleMessage - while(true)",
								"Warte auf daten..");

						wait(getServiceCheckIntervall());
						checkTemperatureAndHumidity();
						// saveDataToProvider();
					} // TODO: handle exception
					catch (Exception e) {
					}
				}
			}
			Log.d(LOG_TAG + " handleMessage", "left Loop");
		}

	}

	@Override
	public void onCreate() {
		// The service is being created
		// Start up the thread running the service. Note that we create a
		// separate thread because the service normally runs in the process's
		// main thread, which we don't want to block. We also make it
		// background priority so CPU-intensive work will not disrupt our UI.
		HandlerThread thread = new HandlerThread("ServiceStartArguments",
				android.os.Process.THREAD_PRIORITY_BACKGROUND);
		thread.start();

		// Get the HandlerThread's Looper and use it for our Handler
		mServiceLooper = thread.getLooper();
		mServiceHandler = new ServiceHandler(mServiceLooper);
		Log.i("onCreate", "CREATE");

	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Toast.makeText(this, "service starting", Toast.LENGTH_SHORT).show();

		// For each start request, send a message to start a job and deliver the
		// start ID so we know which request we're stopping when we finish the
		// job
		Message msg = mServiceHandler.obtainMessage();
		msg.arg1 = startId;
		mServiceHandler.sendMessage(msg);
		Log.i("onStartCommand", "START_COMMAND");

		// If we get killed, after returning from here, restart
		return START_STICKY;
	}

	@Override
	public IBinder onBind(Intent intent) {
		// A client is binding to the service with bindService()
		Log.i("onBind", "BIND");
		serviceIsBoundedToActivity = true;
		return mBinder;
	}

	@Override
	public boolean onUnbind(Intent intent) {
		// All clients have unbound with unbindService()
		serviceIsBoundedToActivity = false;
		Log.i("onUnbind", "UNBIND");
		return mAllowRebind;
	}

	@Override
	public void onRebind(Intent intent) {
		// A client is binding to the service with bindService(),
		// after onUnbind() has already been called
		Log.i("onRebind", "REBIND");
	}

	@Override
	public void onDestroy() {
		// The service is no longer used and is being destroyed
		Log.i("onDestroy()", "DESTROY");
		Message m = new Message();
		m.what = MESSAGE_CANCEL_HANDLER;
		mServiceHandler.sendMessage(m);
	}

	public boolean isNotificationTemperatureIsShowing() {
		return notificationTemperatureIsShowing;
	}

	public void setNotificationTemperatureIsShowing(
			boolean notificationTemperatureIsShowing) {
		this.notificationTemperatureIsShowing = notificationTemperatureIsShowing;
	}

	public boolean isNotificationHumiAirIsShowing() {
		return notificationHumiAirIsShowing;
	}

	public void setNotificationHumiAirIsShowing(
			boolean notificationHumiAirIsShowing) {
		this.notificationHumiAirIsShowing = notificationHumiAirIsShowing;
	}

	private static NotificationCompat.Builder buildNotificationCommon(
			Context _context) {
		NotificationCompat.Builder builder = new NotificationCompat.Builder(
				_context).setWhen(System.currentTimeMillis());
		// Vibration
		builder.setVibrate(new long[] { 500, 200, 700, 100, 900 });

		// LED
		builder.setLights(Color.RED, 3000, 3000);

		// Ton
		// builder.setSound(Uri.parse("uri://sadfasdfasdf.mp3"));

		return builder;
	}

	@SuppressWarnings("deprecation")
	private void showNotification(String _text, String label) {
		// In this sample, we'll use the same text for the ticker and the
		// expanded notification
		CharSequence text = _text;

		// Set the icon, scrolling text and timestamp
		// Notification notification = new Notification(R.drawable.stat_sample,
		// text,
		// System.currentTimeMillis());
		Notification noti = buildNotificationCommon(
				this.getApplicationContext())
				.setContentTitle("Greenhouse Service").setContentText(text)
				.setSmallIcon(R.drawable.ic_launcher).build();

		// The PendingIntent to launch our activity if the user selects this
		// notification
		PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
				new Intent(this, MainActivity.class), 0);

		// Set the info for the views that show in the notification panel.
		noti.setLatestEventInfo(this, label, text, contentIntent);

		notificationCounter++;

		// Send the notification.
		mNM.notify(notificationCounter, noti);
	}

	@SuppressWarnings("unused")
	private boolean getDataFromArduinoByAsyncTcp() {

		WorkerTask task = new WorkerTask();
		task.execute(new String[] { ip });

		return true;
	}

	@SuppressWarnings("unused")
	private boolean getDataFromArduinoByTcp() throws UnknownHostException,
			IOException {
		String sentence;
		String modifiedSentence;
		Socket clientSocket = new Socket(ip, port);
		DataOutputStream outToServer = new DataOutputStream(
				clientSocket.getOutputStream());
		BufferedReader inFromServer = new BufferedReader(new InputStreamReader(
				clientSocket.getInputStream()));
		// TODO Parameter für Arduino bestimmen (falls Tcp nicht geht, dann
		// HTTP)
		sentence = "TestSend :)";
		outToServer.writeBytes(sentence + '\n');

		modifiedSentence = inFromServer.readLine();
		Log.d("FROM SERVER: ", "ANTWORT = " + modifiedSentence);
		clientSocket.close();

		saveDataToBeanByJsonString(modifiedSentence);

		return true;
	}

	public void saveDataToBeanByJsonString(String json) {
		if (json != null && json != "") {
			greenhouseUtils.StringToBean(json);
		}
		// greenhouseUtils.StringToBean(json);
	}

	public void saveDataToProvider() {

		aBean.setId(aBean.getId() + 1);

		String json = greenhouseUtils.objectToJsonString(aBean);

		Log.i("JSON:", json);

		ContentValues values = new ContentValues();
		values.put(GreenhouseContentProvider.id, aBean.getId());
		values.put(GreenhouseContentProvider.timestamp,
				new Timestamp(System.currentTimeMillis()).toString());
		values.put(GreenhouseContentProvider.jsonData, json);
		getContentResolver().insert(GreenhouseContentProvider.getContentUri(),
				values);

	}

	private boolean clearProviderData() {
		// String where = "nameid=?";
		// String[] args = new String[] { "george" };
		// ContentResolver resolver = getContentResolver();
		// String[] projection = new String[] { "id",
		// GreenhouseContentProvider.id };
		// Cursor cursor = resolver.query(
		// GreenhouseContentProvider.getContentUri(), projection, null,
		// null, null);
		// if (cursor.moveToFirst()) {
		// do {
		// long id = cursor.getLong(0);
		// String word = cursor.getString(1);
		// Log.i("Data: ", "id = " + word);
		// } while (cursor.moveToNext());
		// }

		getContentResolver().delete(GreenhouseContentProvider.getContentUri(),
				null, null);
		return true;
	}

	public void messageClearDatabase() {
		// Sende message zum Thread Handler
		Message m = new Message();
		m.what = MESSAGE_CLEAR_DATABASE;
		mServiceHandler.sendMessage(m);
	}

	public ArduinoDataBean getDataBean() {
		return aBean;
	}

	public void checkTemperatureAndHumidity() {
		if (aBean.getCurrentTemp_1() >= aBean.getMaxTemp()
				&& !notificationTemperatureIsShowing) {
			mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			// Display a notification about us starting. We put an icon in the
			// status bar.
			showNotification("Die Temperatur im Gewächshaus ist zu hoch!",
					String.valueOf(aBean.getCurrentTemp_1() + "0° C"));
			notificationTemperatureIsShowing = true;
		} else if (aBean.getCurrentTemp_1() <= aBean.getMinTemp()) {
			mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			showNotification("Die Temperatur im Gewächshaus ist zu niedrig!",
					String.valueOf(aBean.getCurrentTemp_1() + "0° C"));

		}
		if (aBean.getCurrentHumiAir() >= aBean.getMaxHumiAir()
				&& !notificationHumiAirIsShowing) {
			mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			showNotification(
					"Die Luftfeuchtigkeit im Gewächshaus ist zu hoch!",
					String.valueOf(aBean.getCurrentHumiAir() + "0 %"));
			notificationHumiAirIsShowing = true;
		} else if (aBean.getCurrentHumiAir() <= aBean.getMinHumiAir()) {
			mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			showNotification(
					"Die Luftfeuchtigkeit im Gewächshaus ist zu niedrig!",
					String.valueOf(aBean.getCurrentHumiAir()));
		}
	}

}
